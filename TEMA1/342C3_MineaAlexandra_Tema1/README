Alexandra Minea 342C3


Rulare:
make
server : ./server
client: ./client

Clientul asteapta de la server comenzile indicate in enunt. In cazul in care
primeste o comanda gresita se va semnala clientului acest lucru.

Implementare:
    - fisierul .x:
        - structuri de date folosite:
            - sensor_data: asemanator structurii sugerate in enunt
                - am eliminat campul care indica lungimea vectorului de valori
                float pentru ca atunci cand este creat un vector, acesta va fi
                reprezentat ca o structura care oricum are campul len
                ex:

                struct sensor_data{
                    int data_id;
                    float values<>;
                };
                este reprezentat ca:

                struct sensor_data {
                    int data_id;
                    struct {
                        u_int values_len;
                        float *values_val;
                    } values;
                };

            - response: contine un string si are rolul de a impacheta
            un raspuns primit de la server (sub forma de mesaj)
            - user_data: este un tip de input (ce trimite clientul) si
            contine o structura sensor_data si o cheie(cu rol de session 
            key pentru un anumit client)
                - acesta este folosit de functiile add si update
            - del_data si read_data: sunt 2 structuri cu campuri identice, insa
            am ales sa le folosesc separat pentru a fi mai intuitive pentru client
            (numele functiei apelate sa fie usor de asociat cu numele tipului structurii)
                - acestea contin cheia userului (session key-ul) si id-ul intrarii
                pentru care se face cererea
            - username: contine un string = username-ul clientului

        - functii: sunt asociate fiecarei operatii care poate fi facuta de clientului
    
    - mod de functionare:
        - server side:
            - aici sunt implementate functiie definite in fisierul .x
            - pentru fiecare functie din descriere exista si functii auxiliare, 
            vizibile doar in interiorul serverului (nu pot fi apelate de client)
            - memoria locala: este reprezentate sub forma unui map<string, vector<struct sensor_data>>
            ce retine in campul string numele fisierului asignat unui user (ex: user1.dbms), iar
            vectorul contine toate structurile/ inregistrarile facute de client in baza sa de date
        - client side:
            - clientul are rolul de a "imapcheta" datele pe care doreste sa le trimita serverului
            intr-una din structurile puse la dispozitie in definitie si sa apeleze functia
            corespunzatoare operatiei pe care doreste sa o faca
            - acesta primeste de la server un raspuns pe care il afiseaza

    - comenzi:
        - pentru toate comenzile, clientul face aproximativ acelasi lucru:
            - creeaza inputul (structurile necesare)
            - apeleaza functia
            - afiseaza rezultatul intors de server
        - voi descrie in continuare numai ce face serverul la primirea acelei comenzi
        - LOGIN:
            - primeste un username
            - verifica daca exista deja acel username in map-ul de useri
                - mapul de useri = map<string, unsigned long> users
                - are lorul de a pastra perechi de tipul <username, session_key>
                pentru utilizatorii logati in acel moment
            - daca userul respectiv exista deja se intoarce o cheie invalida (0)
            (care este preluata de procesul client, acesta incheindu-si executia)
            - daca userul nu exista in map
                - incrementeaza un contor global
                - returneaza valoarea acelui contor care va deservi drept session key
                folosit mai apoi de client in toate comenzile
            
        - LOAD:
            - obs: aceasta comanda are efect doar daca este trimisa imediat dupa comanda login
            - in cazul in care exista un fisier stocat pe disk asociat clientului, continutul
            lui este incarcat in map (se adauga o intrare cu cheie = numele fisierului,
            valoare = vector de structuri)
            - in cazul in care nu exista un fisier cu numele clientului, el este creat

        - ADD:
            - se adauga in map o structura cu datele despachetate din parametru in
            vectorul de structuri de la cheia fisierului userului

        - DEL:
            - similar add

        - UPDATE:
            - similar add si del

        - STORE:
            - suprascrie valorile din map in fisierul creat pentru userul respectiv

        - GET_STAT si GET_STAT_ALL:
            - se fac foarte usor operatii pe vectorii de floats din structuri
            
        - LOGOUT:
            - se sterge intrarea asociata userului din map-ul de useri, precum si datele
            din map-ul cu baza de date

        - obs: legatura dintre cele 2 map-uri (cel cu useri si cel cu date) este facuta
        prin username (mereu filename = username + "dbms")
            - ele functioneaza ca 2 tabele care au in comun username-ul (pt un user am un
            fisier(pe disk) si niste date(in memorie))         
    

Detaliile legate de teste si ce anume verifica ele in mod particular sunt in
fisierul README din folderul tests.



