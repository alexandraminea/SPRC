Minea Alexandra 342C3 - Tema3 SPRC

Rulare:
    - fie trebuie rulat in terminal scriptul run.sh (din radacina proiectului -> "tema"), fie doar comanda din el
    - docker stack deploy -c stack.yml sprc3
    - docker stack rm sprc3
    - *ultimele 2 comenzi sun cele precizate in enunt pentru pornire si testare
    - *de asemenea, am presupus ca in prealabil a fost rulata comanda `docker swarm init`

Implementare:
    - pentru brokerul de mesaje MQTT am ales imaginea "eclipse-mosquitto", deoarece este cea folosita la laborator
    - pentru baza de date am folosit imaginea influxdb:latest, iar pentru persistenta datelor, volumul influxdb-storage
    - adaptorul (adapter/ adapter.py) se conecteaza la brokerul MQTT si inregistreaza in baza de date informatiile extrase
    din payloadul mesajelor
        - mesajele de log sunt afisate cu comanda:
            `docker service logs sprc3_adapter`
        - daca variabila de mediu DEBUG_DATA_FLOW are valoarea "True"
    - organizarea datelor in baza de date
        - structura unei intrari in baza de date respecta urmatorul format:
        json_body = [
            {
                'measurement': STATIE.METRICA,
                'tags': {
                    'location': LOCATIE,
                    'station' : STATIE
                },
                'fields': {
                    'value': VALOARE (de tip int/float)
                },
                'time' : TIMESTAMP
            }
        ]
    - pentru componenta de vizualizare a datelor am folosit imaginea "grafana/grafana:latest"
        - pentru ca datele sa fie persistente am folosit volumul grafana-storage
        - DataSource Provisioning: pentru ca sursa de date (DataSource) si Dashboard-urile sa fie incarcate la start-up, am adaugat in structura proiectului:
            1. grafana/datasources/datasource.yml -> pentru baza de date influxdb
            2. grafana/dashboards/dasboard1.json -> pentru primul Dashboard (UPB IoT Data)
               grafana/dashboards/dasboard2.json -> pentru al doilea Dashboard (Battery Dashboard)
        - observatii:
            - pentru fisierele *.yml despre care am precizat mai sus am folosit exemplele de pe 'grafana.com' (pe care le-am adaptat)
                -> https://grafana.com/docs/grafana/latest/administration/provisioning/
            (am pastrat comentariile pentru transparenta)
        - accesare in browser: localhost:80
            - username: asistent
            - parola: grafanaSPRC2020
        - observatii:
            - username-ul si parola sunt setate in variabilele de mediu GF_SECURITY_ADMIN_USER si GF_SECURITY_ADMIN_PASSWORD
            - pentru nivelul de incarcare a bateriilor am folosit procente (intrucat nu era specificat in enunt), iar ca praguri min = 0, max = 100

    - distributia in retele (in conformitate cu cerinta):
        1. db-adapter -> pentru comunicatia dintre baza de date si adapter
        2. db-grafana -> pentru comunicatia intre baza de date si componenta de vizualizare
        3. broker-adapter -> pentru comunicatia intre broker-ul de mesaje si adapter


Bibliografie:
    - https://grafana.com/docs/grafana/latest/administration/provisioning/
    - https://grafana.com/docs/grafana/latest/datasources/influxdb/
    - https://diyi0t.com/visualize-mqtt-data-with-influxdb-and-grafana/